
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    image: oncomandas_app:latest
    env_file: .env
    environment:
      DB_HOST: db
      APP_ENV: ${APP_ENV}
    volumes:
      - ./:/var/www/html
      - ./vendor:/var/www/html/vendor
      - ./storage:/var/www/html/storage
    depends_on:
      db:
        condition: service_healthy
    networks:
      - oncomandas

  web:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./:/var/www/html:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - app
    networks:
      - oncomandas

  db:
    image: postgres:15
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE} -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - oncomandas

  adminer:
    image: adminer:latest
    restart: always
    ports:
      - "8081:8080"
    networks:
      - oncomandas

volumes:
  db_data:

networks:
  oncomandas: